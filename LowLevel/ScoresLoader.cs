using Blastula.Sounds;
using Blastula.VirtualVariables;
using Godot;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Numerics;
using static Blastula.ScoresLoader;

namespace Blastula
{
	/// <summary>
	/// Loads and saves records to a centralized index, for leaderboard display or other tracking purposes.
	/// </summary>
	public partial class ScoresLoader : Node
	{
		public static ScoresLoader main = null;
		/// <summary>
		/// The default name for leaderboard slots which aren't occupied.
		/// </summary>
		[Export] public string defaultRowName = "Nanaki_";
		/// <summary>
		/// The default scores which are generated. This list's length is also the number of rows generated by default.
		/// </summary>
		[Export] public long[] defaultScores = new long[10] { 100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000 };

		/// <summary>
		/// Pre-loaded rows after loading from file the first time.
		/// </summary>
		private List<Row> loadedRows = null;
		private bool loadedRowsSortedByScore = false;

		public const string SAVE_PATH = "user://records.csv";

		public class Row
		{
			public string name;
			public BigInteger finalScore;
			public string stageAtEnd;
			public int miss;
			public int bomb;
			public string sessionDirectoryName;

			public static Row ReadFromFile(FileAccess file)
			{
				string[] rowStrings = file.GetCsvLine();
				if (rowStrings == null || rowStrings.Length != 6) return null;
				return new Row
				{
					name = rowStrings[0],
					finalScore = BigInteger.Parse(rowStrings[1]),
					stageAtEnd = rowStrings[2],
					miss = int.Parse(rowStrings[3]),
					bomb = int.Parse(rowStrings[4]),
					sessionDirectoryName = rowStrings[5],
				};
			}

			public static List<Row> ReadAllFromFile(FileAccess file)
			{
				List<Row> rows = new();
				Row currentRow = null;
				while ((currentRow = ReadFromFile(file)) != null)
				{
					rows.Add(currentRow);
				}
				return rows;
			}

			public void WriteToFile(FileAccess file)
			{
				file.StoreCsvLine(
					new string[] { 
						name, 
						finalScore.ToString(), 
						stageAtEnd, 
						miss.ToString(), 
						bomb.ToString(), 
						sessionDirectoryName,
					}
				);
			} 

			public static void WriteAllToFile(List<Row> rows, FileAccess file)
			{
				foreach (Row row in rows) row.WriteToFile(file);
			}
		}

		/// <summary>
		/// Used to order rows in their leaderboard order.
		/// </summary>
		/// <remarks>
		/// Yes we are sorting on every load. 
		/// If you have 10000 entries saved for some reason, you'll just have to wait a bit for loading.
		/// </remarks>
		public class RowSorter : IComparer<Row>
		{
			public enum SortingMode
			{
				Score
			}

			public SortingMode sortingMode = SortingMode.Score;

			public int Compare(Row x, Row y)
			{
				if (x == null && y == null) return 0;
				else if (x == null) return 1;
				else if (y == null) return -1;

				int mainComp = 0;
				switch (sortingMode)
				{
					case SortingMode.Score:
						if (x.sessionDirectoryName is null or "" && y.sessionDirectoryName is not (null or "")) return 1;
						else if (x.sessionDirectoryName is not (null or "") && y.sessionDirectoryName is null or "") return -1;
						mainComp = -x.finalScore.CompareTo(y.finalScore);
						break;
					default:
						break;
				}
				return (mainComp != 0) ? mainComp : x.name.CompareTo(y.name);
			}
		}

		public override void _Ready()
		{
			base._Ready();
			main = this;
		}

		private List<Row> GenerateDefaultRows()
		{
			List<Row> rows = new();
			foreach (long score in defaultScores)
			{
				rows.Add(new Row
				{
					name = defaultRowName,
					finalScore = score,
					stageAtEnd = "",
					miss = 0,
					bomb = 0,
					sessionDirectoryName = "",
				});
			}
			return rows;
		}

		private FileAccess OpenFile(FileAccess.ModeFlags mode)
		{
			return Persistent.OpenOrCreateFile(SAVE_PATH, mode, (newFile) =>
			{
				Row.WriteAllToFile(GenerateDefaultRows(), newFile);
			});
		}

		public BigInteger GetRecordScore()
		{
			if (loadedRows == null)
			{
				LoadRows(new RowSorter { sortingMode = RowSorter.SortingMode.Score });
			}
			if (!loadedRowsSortedByScore)
			{
				loadedRows.Sort(new RowSorter { sortingMode = RowSorter.SortingMode.Score });
				loadedRowsSortedByScore = true;
            }
			if (loadedRows.Count == 0) return 0;
			return loadedRows[0].finalScore;
		}

		public List<Row> LoadRows(RowSorter sorter = null)
		{
			if (loadedRows != null) return loadedRows;

			FileAccess existingFile = null;
			List<Row> rows = new();
			try
			{
				existingFile = OpenFile(FileAccess.ModeFlags.Read);
				rows = Row.ReadAllFromFile(existingFile);
			}
			catch (Exception e)
			{
				GD.PushError($"Problem loading scores: {e.Message}");
			}
			finally
			{
				if (existingFile != null) existingFile.Close();
			}

            loadedRowsSortedByScore = false;
            if (sorter != null) 
			{
				if (sorter.sortingMode == RowSorter.SortingMode.Score) 
				{ 
					loadedRowsSortedByScore = true; 
				}
				rows.Sort(sorter); 
			}

			return loadedRows = new List<Row>(rows);
		}

		public void SaveRow(Row row)
		{
			FileAccess existingFile = null;
			try
			{
				existingFile = OpenFile(FileAccess.ModeFlags.ReadWrite);
				existingFile.SeekEnd();
				row.WriteToFile(existingFile);
			}
			catch (Exception e)
			{
				GD.PushError($"Problem saving scores: {e.Message}");
			}
			finally
			{
				if (existingFile != null) existingFile.Close();
			}

			if (loadedRows != null) 
			{
                loadedRows.Add(row);
                loadedRowsSortedByScore = false;
			}
		}

		public void SaveRows(List<Row> rows)
		{
			FileAccess existingFile = null;
			try
			{
				existingFile = OpenFile(FileAccess.ModeFlags.ReadWrite);
				existingFile.SeekEnd();
				Row.WriteAllToFile(rows, existingFile);
			}
			catch (Exception e)
			{
				GD.PushError($"Problem saving scores: {e.Message}");
			}
			finally
			{
				if (existingFile != null) existingFile.Close();
			}

			if (loadedRows != null) 
			{
				loadedRows.AddRange(rows);
				loadedRowsSortedByScore = false;
			}
		}
	}
}
