using Blastula.Sounds;
using Blastula.VirtualVariables;
using Godot;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Numerics;

namespace Blastula
{
	/// <summary>
	/// Loads and saves records to a centralized index, for leaderboard display or other tracking purposes.
	/// </summary>
	public partial class ScoresLoader : Node
	{
		public static ScoresLoader main = null;
		/// <summary>
		/// The default name for leaderboard slots which aren't occupied.
		/// </summary>
		[Export] public string defaultRowName = "Nanaki_";
		/// <summary>
		/// The default scores which are generated. This list's length is also the number of rows generated by default.
		/// </summary>
		[Export] public long[] defaultScores = new long[10] { 100000, 90000, 80000, 70000, 60000, 50000, 40000, 30000, 20000, 10000 };

		public const string SAVE_PATH = "user://records.csv";

		public class Row
		{
			public string name;
			public BigInteger finalScore;
			public string stageAtEnd;
			public int miss;
			public int bomb;
			public string sessionDirectoryName;

			public static Row ReadFromFile(FileAccess file)
			{
				string[] rowStrings = file.GetCsvLine();
				if (rowStrings == null || rowStrings.Length != 6) return null;
				return new Row
				{
					name = rowStrings[0],
					finalScore = BigInteger.Parse(rowStrings[1]),
					stageAtEnd = rowStrings[2],
					miss = int.Parse(rowStrings[3]),
					bomb = int.Parse(rowStrings[4]),
					sessionDirectoryName = rowStrings[5],
				};
			}

			public static List<Row> ReadAllFromFile(FileAccess file)
			{
				List<Row> rows = new();
				Row currentRow = null;
				while ((currentRow = ReadFromFile(file)) != null)
				{
					rows.Add(currentRow);
				}
				return rows;
			}

			public void WriteToFile(FileAccess file)
			{
				file.StoreCsvLine(
					new string[] { 
						name, 
						finalScore.ToString(), 
						stageAtEnd, 
						miss.ToString(), 
						bomb.ToString(), 
						sessionDirectoryName,
					}
				);
			} 

			public static void WriteAllToFile(List<Row> rows, FileAccess file)
			{
				foreach (Row row in rows) row.WriteToFile(file);
			}
		}

		/// <summary>
		/// Used to order rows in their leaderboard order.
		/// </summary>
		/// <remarks>
		/// Yes we are sorting on every load. 
		/// If you have 10000 entries saved for some reason, you'll just have to wait a bit for loading.
		/// </remarks>
		public class RowSorter : IComparer<Row>
		{
			public enum SortingMode
			{
				Score
			}

			public SortingMode sortingMode = SortingMode.Score;

			public int Compare(Row x, Row y)
			{
				if (x == null && y == null) return 0;
				else if (x == null) return 1;
				else if (y == null) return -1;

				int mainComp = 0;
				switch (sortingMode)
				{
					case SortingMode.Score:
						if (x.sessionDirectoryName is null or "" && y.sessionDirectoryName is not (null or "")) return 1;
						else if (x.sessionDirectoryName is not (null or "") && y.sessionDirectoryName is null or "") return -1;
						mainComp = -x.finalScore.CompareTo(y.finalScore);
						break;
					default:
						break;
				}
				return (mainComp != 0) ? mainComp : x.name.CompareTo(y.name);
			}
		}

		public override void _Ready()
		{
			base._Ready();
			main = this;
		}

		public List<Row> GenerateDefaultRows()
		{
			List<Row> rows = new();
			foreach (long score in defaultScores)
			{
				rows.Add(new Row
				{
					name = defaultRowName,
					finalScore = score,
					stageAtEnd = "",
					miss = 0,
					bomb = 0,
					sessionDirectoryName = "",
				});
			}
			return rows;
		}

		private FileAccess OpenFile(FileAccess.ModeFlags mode)
		{
			FileAccess existingFile = FileAccess.Open(SAVE_PATH, mode);
			if (existingFile == null)
			{
				Error fileLoadError = FileAccess.GetOpenError();
				if (fileLoadError == Error.FileNotFound)
				{
					FileAccess newFile = FileAccess.Open(SAVE_PATH, FileAccess.ModeFlags.Write);
					if (newFile == null) throw new Exception($"Couldn't create records file: {FileAccess.GetOpenError()}");
					Row.WriteAllToFile(GenerateDefaultRows(), newFile);
					newFile.Close();
					return OpenFile(mode); // No we can't just return the newFile, it was in a possibly wrong mode.
				}
				else throw new Exception($"Couldn't load records file: {fileLoadError}");
			}
			return existingFile;
		}

		public List<Row> LoadRows(RowSorter sorter = null)
		{
			FileAccess existingFile = OpenFile(FileAccess.ModeFlags.Read);
			var rows = Row.ReadAllFromFile(existingFile);
			existingFile.Close();
			if (sorter != null) { rows.Sort(sorter); }
			return rows;
		}

		public void SaveRow(Row row)
		{
			FileAccess existingFile = OpenFile(FileAccess.ModeFlags.ReadWrite);
			existingFile.SeekEnd();
			row.WriteToFile(existingFile);
			existingFile.Close();
		}

		public void SaveRows(List<Row> rows)
		{
			FileAccess existingFile = OpenFile(FileAccess.ModeFlags.ReadWrite);
			existingFile.SeekEnd();
			Row.WriteAllToFile(rows, existingFile);
			existingFile.Close();
		}
	}
}
